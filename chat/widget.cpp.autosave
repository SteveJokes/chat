#include "widget.h"
#include "ui_widget.h"
#include <QUdpSocket>
#include <QHostInfo>
#include <QMessageBox>
#include <QScrollBar>
#include <QDateTime>
#include <QNetworkInterface>
#include <QProcess>
#include <voiceplay.h>
#include <voicerecord.h>
#include "tcpserver.h"
#include "tcpclient.h"
#include <QFileDialog>
#include <QColorDialog>
Widget::Widget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::Widget)
{
    ui->setupUi(this);
    setFixedSize(790,460);//设定窗口大小
    //ui->sendButton->setShortcut("Alt+S");
    voicePlay=new VoicePlay(this);//新建一个VoicePlay对象
    udpSocket = new QUdpSocket(this);//新建UDP对象
    port = 8080;//设置端口号为8080
    udpSocket->bind(port, QUdpSocket::ShareAddress);//绑定UDP套接字
    connect(udpSocket, SIGNAL(readyRead()), this, SLOT(processPendingDatagrams()));//连接信号和槽，如果接受到数据调用处理数据函数

    sendMessage(NewParticipant);//创建好对象后向自组网络里头其他节点发送自己的信息，以便其他节点在列表里添加
    server = new TcpServer(this);//新建TCP对象
    connect(server, SIGNAL(sendFileName(QString)), this, SLOT(getFileName(QString)));

    connect(ui->messageTextEdit, SIGNAL(currentCharFormatChanged(QTextCharFormat)),
            this, SLOT(currentFormatChanged(const QTextCharFormat)));
}

Widget::~Widget()
{
    delete ui;
}

void Widget::sendMessage(MessageType type, QString serverAddress)//发送数据函数
{
    QByteArray data;//首先定义数据数组，IO数据流
    QDataStream out(&data, QIODevice::WriteOnly);
    QString localHostName = QHostInfo::localHostName();//获取本地主机名和ip地址
    QString address =getIP();
    out << type << getUserName() << localHostName;//将消息类型，用户名，主机名写入data数据流

    switch(type)//选择数据类型对应的操作
    {
    case Message ://如果是文本消息
        if (ui->messageTextEdit->toPlainText() == "") {//判断是否为空
            QMessageBox::warning(0,tr("warning"),tr("can't be empty!"),QMessageBox::Ok);
            return;
        }
        out << address << getMessage();//不为空的话吧消息和目的ip地址写入到数据流里头
        ui->messageBrowser->verticalScrollBar()
                ->setValue(ui->messageBrowser->verticalScrollBar()->maximum());
        break;

    case NewParticipant :
        out << address;
        break;

    case ParticipantLeft :
        break;

    case FileName : {
        int row = ui->userTableWidget->currentRow();//如果是要发送文件名，先获取选定的列表里头的用户名和ip地址等信息
        QString clientAddress = ui->userTableWidget->item(row, 2)->text();
        out << address << clientAddress << fileName;
        break;
    }
    case VoiceFile:
        {
            int row = ui->userTableWidget->currentRow();//如果是要发送文件名，先获取选定的列表里头的用户名和ip地址等信息
            QString clientAddress = ui->userTableWidget->item(row, 2)->text();
            out << address << clientAddress << voiceFile;
            break;
        }
    case Refuse :
        out << serverAddress;
        break;
    }
        udpSocket->writeDatagram(data,data.length(),QHostAddress("192.168.3.255"), port);//decided by your Broadcast ip addr
}

void Widget::processPendingDatagrams()//处理等待接受的数据
{
    while(udpSocket->hasPendingDatagrams())
    {
        QByteArray datagram;
        datagram.resize(udpSocket->pendingDatagramSize());
        udpSocket->readDatagram(datagram.data(), datagram.size());
        QDataStream in(&datagram, QIODevice::ReadOnly);
        int messageType;
        in >> messageType;
        QString userName,localHostName,ipAddress,message;
        QString time = QDateTime::currentDateTime()//得到当前时间
                .toString("yyyy-MM-dd hh:mm:ss");

        switch(messageType)//选择消息类型
        {
        case Message://如果是文本消息，将文本信息与时间信息一起显示
            in >> userName >> localHostName >> ipAddress >> message;
            ui->messageBrowser->setTextColor(Qt::blue);
            ui->messageBrowser->setCurrentFont(QFont("Times New Roman",12));
            ui->messageBrowser->append("[ " +userName+" ] "+ time);
            ui->messageBrowser->append(message);
            break;

        case NewParticipant:
            in >>userName >>localHostName >>ipAddress;
            newParticipant(userName,localHostName,ipAddress);
            break;

        case ParticipantLeft:
            in >>userName >>localHostName;
            participantLeft(userName,localHostName,time);
            break;

        case FileName: {//如果是文件名，进入接受文件函数处理
            in >> userName >> localHostName >> ipAddress;
            QString clientAddress, fileName;
            in >> clientAddress >> fileName;
            hasPendingFile(userName, ipAddress, clientAddress, fileName);
            break;
        }
        case VoiceFile://如果是
        {
            in >> userName >> localHostName >> ipAddress;
            QString clientAddress, fileName;
            in >> clientAddress >> fileName;

            //hasPendingFile(userName, ipAddress, clientAddress, fileName);
            QString cipAddress=getIP();
            if(cipAddress==clientAddress)
            {
                QString name=fileName;
                if(!name.isEmpty())
                {
                    TcpClient *client = new TcpClient(this);
                    connect(client,SIGNAL(sigGetVoiceFile(QString)),voicePlay,SLOT(slotAddVoiceFile(QString)));
                    client->setFileName("/tmp"+name);
                    client->setHostAddress(QHostAddress(ipAddress));
                    //client->show();
                    ui->messageBrowser->setText(tr("I receaved a voice file:%1!").arg(fileName));
                }
                else ui->messageBrowser->setText("Receive voice file failed!");
            }
            break;
        }
        case Refuse: {//客户端拒绝接受文件
            in >> userName >> localHostName;
            QString serverAddress;
            in >> serverAddress;
            QString ipAddress = getIP();

            if(ipAddress == serverAddress)//判断是否被拒绝的是自己
            {
                server->refused();
            }
            break;
        }
        }
    }
}

void Widget::on_speakerButton_clicked()//查看接受的语音信息
{
    voicePlay->show();
}

void Widget::on_micToolBtn_clicked()//录制语音消息
{

    VoiceRecord *voiceRecord=new VoiceRecord(this);//新建一个voicerecord类
    server->initServer();
    connect(voiceRecord,SIGNAL(signalSendVoice(QString)),server,SLOT(slotVoiceSend(QString)));
    connect(voiceRecord,SIGNAL(signalSendVoice(QString)),this,SLOT(getVoiceFile(QString)));
    voiceRecord->show();

}

void Widget::on_sendToolBtn_clicked()
{
    if(ui->userTableWidget->selectedItems().isEmpty())
    {
        QMessageBox::warning(0, tr("select usr"),
                             tr("Please select usr form the list"), QMessageBox::Ok);
        return;
    }
    server->show();
    server->initServer();
}
void Widget::hasPendingFile(QString userName, QString serverAddress,
                            QString clientAddress, QString fileName)//处理待接受文件
{
    QString ipAddress = getIP();
    //QFileDialog FileDialog=new QFileDialog;
    if(ipAddress == clientAddress)
    {
        int btn = QMessageBox::information(this,tr("receive"),
                                           tr("file from%1(%2)%3,received")
                                           .arg(userName).arg(serverAddress).arg(fileName),
                                           QMessageBox::Yes,QMessageBox::No);
        if (btn == QMessageBox::Yes) {//如果选择接受，获取文件名
            QString name = QFileDialog::getSaveFileName(0,tr("save file"),fileName);
            if(!name.isEmpty())//文件名不为空的话，新建Tcp服务器，进行文件接受
            {
                TcpClient *client = new TcpClient(this);
                client->setFileName(name);
                client->setHostAddress(QHostAddress(serverAddress));
                client->show();
            }
        } else {//拒绝接受，给服务器发送拒绝函数
            sendMessage(Refuse, serverAddress);
        }
    }
}

void Widget::newParticipant(QString userName, QString localHostName, QString ipAddress)//处理新入网的成员
{
    bool isEmpty = ui->userTableWidget->findItems(localHostName, Qt::MatchExactly).isEmpty();//首先判断是否已经在列表里头了
    if (isEmpty) {//如果列表里头没有，就往里头添加相应信息
        QTableWidgetItem *user = new QTableWidgetItem(userName);
        QTableWidgetItem *host = new QTableWidgetItem(localHostName);
        QTableWidgetItem *ip = new QTableWidgetItem(ipAddress);
        ui->userTableWidget->insertRow(0);
        ui->userTableWidget->setItem(0,0,user);
        ui->userTableWidget->setItem(0,1,host);
        ui->userTableWidget->setItem(0,2,ip);
        ui->messageBrowser->setTextColor(Qt::gray);
        ui->messageBrowser->setCurrentFont(QFont("Times New Roman",10));
        ui->messageBrowser->append(tr("%1 online!").arg(userName));
        ui->userNumLabel->setText(tr("Online:%1").arg(ui->userTableWidget->rowCount()));

        sendMessage(NewParticipant);//添加完成以后向所有其他在网节点发送自己的信息，以便新节点更新列表
    }
}

void Widget::participantLeft(QString userName, QString localHostName, QString time)//用户离开
{
    int rowNum = ui->userTableWidget->findItems(localHostName, Qt::MatchExactly).first()->row();
    ui->userTableWidget->removeRow(rowNum);//清除相应用户
    ui->messageBrowser->setTextColor(Qt::gray);
    ui->messageBrowser->setCurrentFont(QFont("Times New Roman", 10));
    ui->messageBrowser->append(tr("%1 leaved at %2 ").arg(userName).arg(time));
    ui->userNumLabel->setText(tr("online:%1").arg(ui->userTableWidget->rowCount()));
}

QString Widget::getIP()//获取本机ip地址
{
    QString ip_temp;
    QList<QHostAddress> list = QNetworkInterface::allAddresses();//首先得到所有ip地址的列表，然后提取出其中的ipv4地址
    foreach (QHostAddress address, list) {
        if(address.protocol() == QAbstractSocket::IPv4Protocol&&address.toString()!="127.0.0.1")
        {
            ip_temp=address.toString();
            return ip_temp;
        }
    }
    return 0;
}


QString Widget::getUserName()//获取用户名
{
    QStringList envVariables;
    envVariables << "USERNAME.*" << "USER.*" << "USERDOMAIN.*"
                 << "HOSTNAME.*" << "DOMAINNAME.*";//根据不同平台环境设定的变量名称
    QStringList environment = QProcess::systemEnvironment();
    foreach (QString string, envVariables) {
        int index = environment.indexOf(QRegExp(string));
        if (index != -1) {
            QStringList stringList = environment.at(index).split('=');
            if (stringList.size() == 2) {
                return stringList.at(1);//返回在账户列表中的第一个用户名
                break;
            }
        }
    }
    return "unknown";//如果没用户名，返回unknown
}


QString Widget::getMessage()//获取文本框里头的文本消息，并转化为html格式
{
    QString msg = ui->messageTextEdit->toHtml();

    ui->messageTextEdit->clear();
    ui->messageTextEdit->setFocus();
    return msg;
}


void Widget::on_sendButton_clicked()
{
    sendMessage(Message);
}


void Widget::getFileName(QString name)
{
    fileName = name;
    sendMessage(FileName);
}

void Widget::getVoiceFile(QString name)
{
    voiceFile = name;
    sendMessage(VoiceFile);
}






void Widget::on_fontComboBox_currentFontChanged(QFont f)//改变文字风格
{
    ui->messageTextEdit->setCurrentFont(f);
    ui->messageTextEdit->setFocus();
}



void Widget::on_sizeComboBox_currentIndexChanged(QString size)
{
    ui->messageTextEdit->setFontPointSize(size.toDouble());
    ui->messageTextEdit->setFocus();
}


void Widget::on_boldToolBtn_clicked(bool checked)//加粗
{
    if(checked)
        ui->messageTextEdit->setFontWeight(QFont::Bold);
    else
        ui->messageTextEdit->setFontWeight(QFont::Normal);
    ui->messageTextEdit->setFocus();
}


void Widget::on_italicToolBtn_clicked(bool checked)//斜体
{
    ui->messageTextEdit->setFontItalic(checked);
    ui->messageTextEdit->setFocus();
}


void Widget::on_underlineToolBtn_clicked(bool checked)
{
    ui->messageTextEdit->setFontUnderline(checked);
    ui->messageTextEdit->setFocus();
}


void Widget::on_colorToolBtn_clicked()//颜色
{
    color = QColorDialog::getColor(color, this);
    if (color.isValid()) {
        ui->messageTextEdit->setTextColor(color);
        ui->messageTextEdit->setFocus();
    }
}

void Widget::currentFormatChanged(const QTextCharFormat &format)
{
    ui->fontComboBox->setCurrentFont(format.font());


    if (format.fontPointSize() < 9) {
        ui->sizeComboBox->setCurrentIndex(3);
    } else {
        ui->sizeComboBox->setCurrentIndex( ui->sizeComboBox
                                           ->findText(QString::number(format.fontPointSize())));
    }
    ui->boldToolBtn->setChecked(format.font().bold());
    ui->italicToolBtn->setChecked(format.font().italic());
    ui->underlineToolBtn->setChecked(format.font().underline());
    color = format.foreground().color();
}


void Widget::on_saveToolBtn_clicked()//保存
{
    if (ui->messageBrowser->document()->isEmpty()) {
        QMessageBox::warning(0, tr("warning"), tr("record is empty,can't save"), QMessageBox::Ok);
    } else {
        QString fileName = QFileDialog::getSaveFileName(this,
                                                        tr("save "), tr("record"), tr("text(*.txt);;All File(*.*)"));
        if(!fileName.isEmpty())
            saveFile(fileName);
    }
}


bool Widget::saveFile(const QString &fileName)//保存文件
{
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, tr("save file"),
                             tr("can't save' %1:\n %2").arg(fileName)
                             .arg(file.errorString()));
        return false;
    }
    QTextStream out(&file);
    out << ui->messageBrowser->toPlainText();

    return true;
}


void Widget::on_clearToolBtn_clicked()//清除聊天记录
{
    ui->messageBrowser->clear();
}


void Widget::on_exitButton_clicked()
{
    close();
}


void Widget::closeEvent(QCloseEvent *e)//关闭
{
    sendMessage(ParticipantLeft);
    QWidget::closeEvent(e);
}

void Widget::on_mapButton_clicked()//显示地图
{
    static bool mapFlag=0;
    if(mapFlag==0)
    {
        mapWidget=new MapWidget(this);//创建新地图
        mapWidget->show();
        mapFlag=1;
    }
    else
    {
        mapWidget->close();//关闭地图
        mapFlag=0;
    }
}

